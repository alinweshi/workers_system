<?php

namespace {{ namespace }};

use {{ rootNamespace }}Http\Controllers\Controller;
use App\Http\Requests\{{ UpdateModelRequest }} ;
use App\Http\Requests\{{ StoreModelRequest }} ;
use {{ ModelNameSpace }};
use Illuminate\Support\Facades\Validator;
use {{ ModelServiceNameSpace }};


class {{ class }}Controller extends Controller
{
    protected ${{ modelVariable }};
    protected ${{ modelVariable }}Service;
    public function __construct({{ ModelClass }} ${{ modelVariable }},{{ ModelClass }}Service ${{ modelVariable }}Service){
        $this->{{ modelVariable }}Service=${{ modelVariable }}Service;
        $this->{{ modelVariable }}=${{ modelVariable }};
    }
    /**
     * Display a listing of the resource.
     */
    public function index()
    {
        ${{ modelVariables }}=$this->{{ modelVariable }}Service->getAll();
        if(${{ modelVariables }}){
            return response()->json(["{{ modelVariables }}"=>${{ modelVariables }}]);
        }
        return response()->json(["error"=>"no {{ modelVariables }} found"]);
    }

    /**
     * Show the form for creating a new resource.
     */
    public function create()
    {

    }

    /**
     * Store a newly created resource in storage.
     */
    public function store({{ StoreModelRequest }} $request)
    {
                try{
            $validator=Validator::make($request->all(),$request->rules());
            if ($validator->fails()) {
                return response()->json(['errors' => $validator->errors()], 400);
            }
            $data=$validator->validated();
            ${{ modelVariables }}=$this->{{ modelVariable }}Service->create($data);
            if(!${{ modelVariables }}){
                return response()->json(['error' => '{{ modelVariables }} could not be created'], 500);
            }
            return response()->json(['success' => '{{ modelVariables }} added successfully'],200);
        }catch(\Exception $e){
            return response()->json(['error' => $e->getMessage()], 500);
        }

    }

    /**
     * Display the specified resource.
     */
    public function show(string $id)
    {
        ${{ modelVariable }}=$this->{{ modelVariable }}Service->getById($id);
        if(!${{ modelVariable }}){
                return response()->json(['error' => '{{ modelVariable }} not found'], 404);
        }
         return response()->json(['{{ modelVariable }}' => ${{ modelVariable }} ], 500);
    }

    /**
     * Show the form for editing the specified resource.
     */
    public function edit(string $id)
    {
        //
    }

    /**
     * Update the specified resource in storage.
     */
    public function update({{ UpdateModelRequest }} $request, string $id)
    {
        try{
            $validator=Validator::make($request->all(),$request->rules());
            if ($validator->fails()) {
                return response()->json(['errors' => $validator->errors()], 400);
            }
            $data=$validator->validated();
            ${{ modelVariables }}=$this->{{ modelVariable }}Service->update($data,$id);
            if(!${{ modelVariables }}){
                return response()->json(['error' => '{{ modelVariables }} could not be updated'], 500);
            }
            return response()->json(['success' => '{{ modelVariables }} updated successfully'],200);
        }catch(\Exception $e){
            return response()->json(['error' => $e->getMessage()], 500);
        }
    }

    /**
     * Remove the specified resource from storage.
     */
    public function delete(string $id)
    {
    ${{ modelVariable }}=$this->show($id);
    if(${{ modelVariable }}){
              $this->{{ modelVariable }}Service->delete($id);
              return response()->json(["message"=>"{{ modelVariable }} deleted successfully"],200);
    }
                return response()->json(['error' => 'no {{ modelVariable }} to delete'], 404);
        }

    /**
     * Remove the all resources from storage.
     */
    public function deleteAll()
    {
        ${{ modelVariables }}=$this->{{ modelVariable }}Service->getAll();
    if(${{ modelVariables }}){
              $this->{{ modelVariable }}Service->deleteAll();
              return response()->json(["message"=>"{{ modelVariables }} deleted successfully"],200);
    }
                return response()->json(['error' => 'no {{ modelVariables }} to delete'], 404);
        }

}
